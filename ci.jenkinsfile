#!groovy

@Library("jenkinslib") _

String workspace = "/app/.jenkins/workspace"

def tool = new org.devops.tools()
def email = new org.devops.emial()

String srcUrl = "${env.srcUrl}"
String branchName = "${env.branchName}"

pipeline{
    agent { node { label "master" }}

    stages {
        // 拉取代码
        stage('CheckOut'){  // 阶段
            steps { // 步骤
                script{
                    checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], extensions: [], userRemoteConfigs: [[credentialsId: 'c8c24f9c-bd31-437f-996b-503180bd14dc', url: "${srcUrl}"]]])
                }
            }
        }

        stage('Build'){
            setps{
                script{
                    build.Build(buildType.buildShell)
                    deploy.SaltDeploy("${deployHosts}","test.ping")
                    deploy.AnsibleDeploy("${deployHosts}","-m ping")
                }
            }
        }
    }

        // 代码扫描
        stage('CodeScan'){
            setps{
                timeout(time: 2, unit: 'MINUT'){
                    script{
                        println("代码扫描")
                        // tools.PrintMes("代码扫描")
                        tools.PrintMes("代码扫描",'green')
                    }
                }
            }
        }
    }

    // 构建后操作
    post{
        alway {
            script{
                println("always")
            }
        }
        
        success {
            script{
                currentBuild.description = "\n 构建成功"
                emial.Email("流水线成功",userEmail)
            }
        }

        failure {
            script {
                currentBuild.description = "\n 构建失败"
                emial.Email("流水失败",userEmail)
            }
        }

        aborted {
            script {
                currentBuild.description = "\n 构建取消"
                emial.Email("流水线被取消",userEmail)
            }
        }
    }

}



